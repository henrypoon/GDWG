// add a node to the graph
template <typename N, typename E> bool Graph<N,E>::addNode(const N& node) {
	if (isNode(node)) return false;
	nodes.push_back(std::make_shared<Node>(Node{node}));
	return true;
}

// find a node with specific value from graph(constant type, used for the methods that won't change. eg: find a destination node and add it into a edge)
template <typename N, typename E> auto Graph<N,E>::findNode(const N& node) const {
	auto result = std::find_if(nodes.begin(), nodes.end(), [&node] (const std::shared_ptr<Node>& n) {
		return node == n->getNode();
	});
	return result;
}

// find a node with specific value from graph(non-constant type)
template <typename N, typename E> auto Graph<N,E>::findNode(const N& node) {
	auto result = std::find_if(nodes.begin(), nodes.end(), [&node] (const std::shared_ptr<Node>& n) {
		return node == n->getNode();
	});
	return result;
}

// copy constructor
template <typename N, typename E> Graph<N, E>::Graph(const Graph &g) {
	for (auto n: g.nodes) {
		addNode(n->getNode());
	}
	for (auto n: g.nodes) {
		for (auto e: n->getEdges()) {
			addEdge(n->getNode(), e->getDest(), e->getWeight());
		}
	}
}

// move constructor
template <typename N, typename E> Graph<N, E>::Graph(Graph &&g) {
	for (auto n: g.nodes) {
		addNode(n->getNode());
	}
	for (auto n: g.nodes) {
		for (auto e: n->getEdges()) {
			addEdge(n->getNode(), e->getDest(), e->getWeight());
		}
	}
	g.clear();
}

// copy assignment
template <typename N, typename E> Graph<N,E>& Graph<N, E>::operator=(const Graph &g) {
	if (this != &g) {
		clear();
		for (auto n: g.nodes) {
			addNode(n->getNode());
		}
		for (auto n: g.nodes) {
			for (auto e: n->getEdges()) {
				addEdge(n->getNode(), e->getDest(), e->getWeight());
			}
		}
	}
	return *this;
}

// move assignment
template <typename N, typename E> Graph<N,E>& Graph<N, E>::operator=(Graph &&g) {
	if (this != &g) {
		clear();
		for (auto n: g.nodes) {
			addNode(n->getNode());
		}
		for (auto n: g.nodes) {
			for (auto e: n->getEdges()) {
				addEdge(n->getNode(), e->getDest(), e->getWeight());
			}
		}
		g.clear();
	}
	return *this;
}

// add edge between two nodes
template <typename N, typename E> bool Graph<N,E>::addEdge(const N& src, const N& dst, const E& w) {
	if (!isNode(src)) {
		throw std::runtime_error("Can't find source node");
	}
	if (!isNode(dst)) {
		throw std::runtime_error("Can't find destination node");
	}
	auto from = findNode(src);		//find the source node
	auto to = findNode(dst);		//find the destination node
	if ((*from)->isExisted(dst, w)) {	//check whether destination node is existed or not
		return false;
	}
	(*from)->addEdge(**to, w);		// add the edge into source node
	return true;
}

// add edge to a node
template <typename N, typename E> bool Graph<N,E>::Node::addEdge(const Node& dst, const E& w) {
	edges.push_back(std::make_shared<Edge>(Edge{dst, w}));
	return true;
}

// add edge to a node
template <typename N, typename E> void Graph<N,E>::Node::addEdge(const std::shared_ptr<Edge>& sp) {
	edges.push_back(sp);
}

// Replaces the original data, oldData, stored at this particular node by the replacement data, newData.
template <typename N, typename E> bool Graph<N,E>::replace(const N& oldData, const N& newData) {
	if (!isNode(oldData)) {									//find the source node
		throw std::runtime_error("Can't find oldData");
	}
	if (isNode(newData)) {					//find whether new data is already existed
		return false;
	}
	auto old = findNode(oldData);
	(*old)->replace(newData);
	return true;
}

// replace current node with new value 
template <typename N, typename E> void Graph<N,E>::Node::replace(const N& newData) {
	*nodePtr = newData;
}

// mergeReplace
template <typename N, typename E> void Graph<N,E>::mergeReplace(const N& oldData, const N& newData) {
	if (!isNode(oldData)) {									//check source node
		throw std::runtime_error("Can't find oldData");
	}
	if (!isNode(newData)) {								//check destination node
		throw std::runtime_error("Can't find newData");
	}
	auto newD = findNode(newData);
	///////////////////////////////// CHANG INCOMING EDGE ////////////////////////////
	for (unsigned int i=0; i<nodes.size(); ++i) {
		if (nodes[i]->getNode() != oldData) {
			nodes[i]->mergeIn(oldData, **newD, (*newD)->getNodePtr());
		} 
	}
	///////////////////////////////// CHANG OUTGOING EDGE ////////////////////////////
	for (unsigned int i=0; i<nodes.size(); ++i) {
		if (nodes[i]->getNode() == oldData) {
			nodes[i]->mergeOut((**newD));
		}
	}
	// remove old node
	deleteNode(oldData);
}

// Remove all nodes and edges from the graph
template <typename N, typename E> void Graph<N,E>::clear() noexcept {
	nodes.clear();
}

// remove the edge associated with deleted nodes
template <typename N, typename E> void Graph<N,E>::update() {
	for (auto n: nodes) {
		auto& es = n->getEdges();
		es.erase(std::remove_if(es.begin(), es.end(), [](const std::shared_ptr<Edge>& e) {
			return e->getDestPtr() == NULL;
		}), es.end());
	}
}

// delete specific node from graph
template <typename N, typename E> void Graph<N,E>::deleteNode(const N& node) noexcept {
	if (!isNode(node)) {
		return;
	}
	auto dn = findNode(node);			// find the target node from graph
	dn->reset();
	nodes.erase(dn);
	update();
}

// find and delete a edge with specific source, destination and weight
template <typename N, typename E> void Graph<N,E>::deleteEdge(const N& src, const N& dst, const E& w) noexcept {
	if (!isNode(src)) {					// check source node
		return;
	}
	if (!isNode(dst)) {				//check destination node
		return;
	}
	auto n = findNode(src);
	(*n)->deleteEdge(dst, w);
}

// delete a edge with specific destination and weight from a node
template <typename N, typename E> void Graph<N,E>::Node::deleteEdge(const Node& dst, const E& w) {
	auto e = std::find_if(edges.begin(), edges.end(), [&dst, &w] (const std::shared_ptr<Edge>& e) {			// find the edge from vector
		return w == e->getWeight() && dst.getNode() == e->getDest();
	});
	if (e != edges.end()) {
		e->reset();
		edges.erase(e);
	}
}

// add outgoing edges from old node to new node
template <typename N, typename E> void Graph<N,E>::Node::mergeOut(Node& newData) {
	for (auto e: edges) {
		if (!(newData.isExisted(e->getDest(), e->getWeight()))) {
			newData.addEdge(e);
		}
	}
}

// add incoming edges from new node to old node
template <typename N, typename E> void Graph<N,E>::Node::mergeIn(const N& oldData, const Node& newData, std::shared_ptr<N> sp) {
	if (edges.size() != 0) {
		for (auto e: edges) {
			if (e->getDest() == oldData) {
				if (!isExisted(newData, e->getWeight())) {
					e->changeDest(sp);
				}
			}
		}
	}
}

// change the destination of a edge
template <typename N, typename E> void Graph<N,E>::Edge::changeDest(std::shared_ptr<N> sp) {
	destNode = sp;
}

// check whether there's a edge from src to dst
template <typename N, typename E> bool Graph<N,E>::isConnected(const N& src, const N& dst) const {
	if (!isNode(src)) {
		throw std::runtime_error("Can't find source node");
	}
	if (!isNode(dst)) {
		throw std::runtime_error("Can't find destination node");
	}
	auto from = findNode(src);

	if ((*from)->isConnected(dst)) return true;
	return false;
}

// check whether a edge with weight and destination already connected to a node
template <typename N, typename E> bool Graph<N,E>::Node::isExisted(const Node& dst, const E& w) const {
	auto checkedW = std::find_if(edges.begin(), edges.end(), [&dst, &w] (const std::shared_ptr<Edge>& e) {
		return w == e->getWeight() && dst.getNode() == e->getDest();
	});
	if (checkedW == edges.end()) return false;
	return true;
}

// check whether a edge with destination already connected to a node
template <typename N, typename E> bool Graph<N,E>::Node::isConnected(const Node& dst) const {
	auto checkedW = std::find_if(edges.begin(), edges.end(), [&dst] (const std::shared_ptr<Edge>& e) {
		return dst.getNode() == e->getDest();
	});
	if (checkedW == edges.end()) return false;
	return true;
}

// Returns true if a node with value val exists in the graph and false otherwise.
template <typename N, typename E> bool Graph<N,E>::isNode(const N& val) const {
	auto res = findNode(val);
	if (res == nodes.end() ) return false;
	return true;
}

// method to print all nodes
template <typename N, typename E> void Graph<N,E>::printNodes() const {
	std::vector<std::shared_ptr<Node>> temp = nodes;
	std::sort(temp.begin(), temp.end(), [](const std::shared_ptr<Node>& a, const std::shared_ptr<Node>& b) {		// sort nodes
		if (a->getNumOfEdges() < b->getNumOfEdges()) {
			return true;
		} else if (a->getNumOfEdges() == b->getNumOfEdges()) {
			if ((*a) < (*b)) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	});

	for (auto n: temp) {
		n->printNode();
	}
}

// print all edges of a node
template <typename N, typename E> void Graph<N,E>::printEdges(const N& val) const {
	if (!isNode(val)) {
		throw std::runtime_error("Can't find the node");
	}
	std::cout << "Edges attached to Node " << val << "\n";
	auto node = findNode(val);
	(*node)->printEdges();
}

// print all edges of this node
template <typename N, typename E> void Graph<N,E>::Node::printEdges() const {
	if (edges.size() == 0) {
		std::cout << "(null)" << std::endl;
	} else {
		std::vector<std::shared_ptr<Edge>> temp = edges;
		std::sort(temp.begin(), temp.end(), [](const std::shared_ptr<Edge>& a, const std::shared_ptr<Edge>& b) {		// sort edges
			if (b->getWeight() > a->getWeight()) {
				return true;
			} else if (b->getWeight() == a->getWeight()) {
				if ((*a) < (*b)) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		});

		for (auto e: temp) {
			e->printEdge();
		}
	}
}

// method to print a node
template <typename N, typename E> void Graph<N,E>::Node::printNode() const {
	std::cout << *(nodePtr) << std::endl;
}

// method to print a edge
template <typename N, typename E> void Graph<N,E>::Edge::printEdge() const {
	std::cout << getDest() << " " << getWeight() << std::endl;
}

// get pointer of a node
template <typename N, typename E> std::shared_ptr<N> Graph<N,E>::Node::getPtr() const {
	return nodePtr;	
}

// get destination of edge
template <typename N, typename E> N& Graph<N,E>::Edge::getDest() const {
	auto dest = destNode.lock();
	return *dest;
}

// get pointer of destination in a edge 
template <typename N, typename E> std::shared_ptr<N> Graph<N,E>::Edge::getDestPtr() const {
	return destNode.lock();
}